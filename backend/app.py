
from flask import Flask, request, jsonify, make_response
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy
from os import environ
app=Flask(__name__)
CORS(app)
app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL')
db = SQLAlchemy(app)
class User(db.Model):
    __tablename__ = 'users'
    id=db.Column(db.Integer,primary_key=True)
    username=db.Column(db.String(80),unique=True,nullable=False)
    email=db.Column(db.String(80),unique=True,nullable=False)
    password=db.Column(db.String(120),nullable=False)
def json(self):
    return{
        'id': self.id,
        'username': self.username,
        'email': self.email
    }
db.create_all()
@app.route('/api/users',methods=['POST'])
def create_user():
    data=request.get_json()
    try:
        new_user=User(
        id=data.get('id'),  # Optional, can be auto-generated by the database
            username=data['username'],
            email=data['email'],
            password=data['password']
        )
        db.session.add(new_user)
        db.session.commit()
        return jsonify(new_user.json()), 201
    except Exception as e:
        db.session.rollback()
        return make_response(jsonify({'error': str(e)}), 400)
@app.route('/api/users', methods=['GET'])
def get_users():
   try:
       users=User.query.all()
       return jsonify([user.json()for user in users]), 200
   except Exception as e:
       return make_response(jsonify({'error getting users': str(e)}), 500)
@app.route('/api/users/<int:id>',methods=['GET'])
def get_user(id):
   try:
       user=User.query.get_or_404(id)
       if user:
         return make_response(jsonify(user.json())),200
   except Exception as e:
      return make_response(jsonify({'error getting user': str(e)}), 500)
@app.route('/api/users/<int:id>',methods=['PUT'])
def update_user(id):
    try :
        user=user.query.get_or_404(id).first()
        data=request.get_json()
        user.username=data.get('username',user.username)
        user.email=data.get('email',user.email)
        user.password=data.get('password',user.password)
        db.session.commit()
        return jsonify(user.json()), 200
    except Exception as e:
        db.session.rollback()
        return make_response(jsonify({'error updating user': str(e)}), 400)
@app.route('/api/users/<int:id>',methods=['DELETE'])
def delete_user(id):
    try:
        user=User.query.filter_by(id=id).first_or_404()
        db.session.delete(user)
        db.session.commit()
        return jsonify({'message': 'User deleted successfully'}), 200
    except Exception as e:
        db.session.rollback()
        return make_response(jsonify({'error deleting user': str(e)}), 400)
        



